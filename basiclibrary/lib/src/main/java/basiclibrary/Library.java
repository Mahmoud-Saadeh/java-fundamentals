/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;

import java.util.*;

public class Library {
    /*
       public static void main(String[] args) {
        int[] resultArr = roll(4);

        int[][] weeklyMonthTemperatures = {
                {66, 64, 58, 65, 71, 57, 60},
                {57, 65, 65, 70, 72, 65, 51},
                {55, 54, 60, 53, 59, 57, 61},
                {65, 56, 55, 52, 55, 62, 57}
        };

        System.out.println(Arrays.toString(resultArr));
        System.out.println(containsDuplicates(resultArr));
        System.out.println(average(resultArr));
        System.out.println(Arrays.toString(lowestAvg(weeklyMonthTemperatures)));
        minMaxFromArrayOfArrays(weeklyMonthTemperatures);
           List<String> votes = new ArrayList<>();
           votes.add("Bush");
           votes.add("Bush");
           votes.add("Bush");
           votes.add("Shrub");
           votes.add("Hedge");
           votes.add("Shrub");
           votes.add("Bush");
           votes.add("Hedge");
           votes.add("Bush");

           String winner = tally(votes);
           System.out.println(winner + " received the most votes!");
    }
     */

    public static int[] roll(int num) {
        Random random = new Random();
        int[] arr = new int[num];
        for (int i = 0; i < num; i++) {
            int rand = random.nextInt(6 - 1 + 1) + 1;
            arr[i] = rand;

        }
        return arr;
    }

    public static boolean containsDuplicates(int[] arr) {
        for (int i = 0; i < arr.length; i++) {
            for (int j = i + 1; j < arr.length; j++) {
                if (arr[i] == arr[j]) {
                    return true;
                }

            }
        }
        return false;
    }

    public static float average(int[] arr) {
        int arrLength = arr.length;
        int sum = 0;
        for (int num : arr) {
            sum = sum + num;
        }

        return (float) sum / arrLength;
    }

    public static int[] lowestAvg(int[][] arr) {
        float[] arrOfAvg = new float[arr.length];

        for (int i = 0; i < arr.length; i++) {
            int oneSum = 0;
            int oneArrLength = arr[i].length;
            for (int j = 0; j < oneArrLength; j++) {
                oneSum = oneSum + arr[i][j];

            }
            arrOfAvg[i] = (float) oneSum / oneArrLength;
        }
        float compare = arrOfAvg[0];
        for (float avg : arrOfAvg) {
            if (compare >= avg) {
                compare = avg;
            }
        }
        int arrIndex = 0;
        for (int i = 0; i < arrOfAvg.length; i++) {
            if (compare == arrOfAvg[i]) {
                arrIndex = i;
            }
        }
        return arr[arrIndex];
    }

    private static HashMap<String, Integer> minMaxFromArray(Object[] arr){
        HashMap<String, Integer> minMax = new HashMap<>();

        int minValue = (int) arr[0];
        int maxValue = (int) arr[0];
        for (int i = 0; i < arr.length; i++) {
            if (minValue >= (int) arr[i]) {
                minValue = (int) arr[i];
            }
            if (maxValue <= (int) arr[i]) {
                maxValue = (int) arr[i];
            }
        }
        minMax.put("Min", minValue);
        minMax.put("Max", maxValue);
        return minMax;
    }

    public static HashMap<String, Integer> minMaxFromArrayOfArrays(int[][] arrOfArr){

        HashSet<Integer> temperatures = new HashSet<>();
        for (int[] tempArr : arrOfArr) {
            for (int temp : tempArr) {
                temperatures.add(temp);
            }
        }
        HashMap<String, Integer> minMax = minMaxFromArray(temperatures.toArray());
        System.out.println(minMax);

        int min = minMax.get("Min");
        int max = minMax.get("Max");

        System.out.println("Low: " + min);
        System.out.println("High: " + max);

        HashMap<Integer, Integer> fromMinToMax = new HashMap<>();

        for (int i = min; i <= max; i++) {
            fromMinToMax.put(i,i);
        }
        for (int temperature : temperatures) {

            if (fromMinToMax.containsKey(temperature)){
                fromMinToMax.remove(temperature,temperature);
            }

        }
        for (Integer key : fromMinToMax.keySet()) {
            System.out.println("Never saw temperature: " + key);
        }
    return minMax;
    }

    public static String tally(List<String> votes){
        HashMap<String, Integer> votesNum = new HashMap<>();
        for (String elem : votes) {
            if (votesNum.containsKey(elem)){
                votesNum.put(elem,votesNum.get(elem) + 1);
            }else{
                votesNum.put(elem,1);
            }
        }
        int maxVotes = 0;
        for (int values : votesNum.values()) {
            if (maxVotes <= values) {
                maxVotes = values;
            }
        }
        String winner = "";
        for (String key : votesNum.keySet()) {
            if (votesNum.get(key) == maxVotes) {
                winner =  key;
            }
        }

        return winner;
    }
}